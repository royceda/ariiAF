<?php

namespace Proxies\__CG__\Arii\CoreBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Connection extends \Arii\CoreBundle\Entity\Connection implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'id', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'enterprise', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'category', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'proxy', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'env', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'title', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'description', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'host', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'interface', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'port', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'protocol', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'login', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'password', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'key', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'driver', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'vendor', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'database', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'path');
        }

        return array('__isInitialized__', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'id', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'enterprise', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'category', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'proxy', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'env', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'title', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'description', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'host', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'interface', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'port', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'protocol', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'login', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'password', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'key', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'driver', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'vendor', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'database', '' . "\0" . 'Arii\\CoreBundle\\Entity\\Connection' . "\0" . 'path');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Connection $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setIpAddress($ip_address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIpAddress', array($ip_address));

        return parent::setIpAddress($ip_address);
    }

    /**
     * {@inheritDoc}
     */
    public function setProtocol($protocol)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProtocol', array($protocol));

        return parent::setProtocol($protocol);
    }

    /**
     * {@inheritDoc}
     */
    public function getProtocol()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProtocol', array());

        return parent::getProtocol();
    }

    /**
     * {@inheritDoc}
     */
    public function getIpAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIpAddress', array());

        return parent::getIpAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setHost($host)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHost', array($host));

        return parent::setHost($host);
    }

    /**
     * {@inheritDoc}
     */
    public function getHost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHost', array());

        return parent::getHost();
    }

    /**
     * {@inheritDoc}
     */
    public function setPort($port)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPort', array($port));

        return parent::setPort($port);
    }

    /**
     * {@inheritDoc}
     */
    public function getPort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPort', array());

        return parent::getPort();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogin($login)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogin', array($login));

        return parent::setLogin($login);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogin', array());

        return parent::getLogin();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setVendor($vendor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVendor', array($vendor));

        return parent::setVendor($vendor);
    }

    /**
     * {@inheritDoc}
     */
    public function getVendor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVendor', array());

        return parent::getVendor();
    }

    /**
     * {@inheritDoc}
     */
    public function setDriver($driver)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDriver', array($driver));

        return parent::setDriver($driver);
    }

    /**
     * {@inheritDoc}
     */
    public function getDriver()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDriver', array());

        return parent::getDriver();
    }

    /**
     * {@inheritDoc}
     */
    public function setIpAdress($ipAdress)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIpAdress', array($ipAdress));

        return parent::setIpAdress($ipAdress);
    }

    /**
     * {@inheritDoc}
     */
    public function getIpAdress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIpAdress', array());

        return parent::getIpAdress();
    }

    /**
     * {@inheritDoc}
     */
    public function setProxy(\Arii\CoreBundle\Entity\Connection $proxy = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProxy', array($proxy));

        return parent::setProxy($proxy);
    }

    /**
     * {@inheritDoc}
     */
    public function getProxy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProxy', array());

        return parent::getProxy();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpace($space)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpace', array($space));

        return parent::setSpace($space);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpace', array());

        return parent::getSpace();
    }

    /**
     * {@inheritDoc}
     */
    public function setDatabase($database)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatabase', array($database));

        return parent::setDatabase($database);
    }

    /**
     * {@inheritDoc}
     */
    public function getDatabase()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatabase', array());

        return parent::getDatabase();
    }

    /**
     * {@inheritDoc}
     */
    public function setPath($path)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPath', array($path));

        return parent::setPath($path);
    }

    /**
     * {@inheritDoc}
     */
    public function getPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPath', array());

        return parent::getPath();
    }

    /**
     * {@inheritDoc}
     */
    public function setSslPort($sslPort)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSslPort', array($sslPort));

        return parent::setSslPort($sslPort);
    }

    /**
     * {@inheritDoc}
     */
    public function getSslPort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSslPort', array());

        return parent::getSslPort();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnterprise(\Arii\CoreBundle\Entity\Enterprise $enterprise = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnterprise', array($enterprise));

        return parent::setEnterprise($enterprise);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnterprise()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnterprise', array());

        return parent::getEnterprise();
    }

    /**
     * {@inheritDoc}
     */
    public function setInterface($interface)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInterface', array($interface));

        return parent::setInterface($interface);
    }

    /**
     * {@inheritDoc}
     */
    public function getInterface()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInterface', array());

        return parent::getInterface();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(\Arii\CoreBundle\Entity\Category $category = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', array($category));

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', array());

        return parent::getCategory();
    }

}
